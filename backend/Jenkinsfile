pipeline {
    agent none
    environment {
        SERVER_CREDENTIALS = 's3-access'
        WEBHOOK_URL = credentials('DiscordWebhookDT')
        BUCKET = 'dmytro-team-bucket'
        REGION = 'eu-central-1'
    }
    stages {
        stage('Build') {
            agent { label 'java && jdk-17' }
            steps {
                println 'Cloning repo, setting permissions...'
                git branch: 'dev', url: 'https://github.com/ProvedCode/backend.git'
                sh 'chmod 744 ./mvnw'
                println 'Build start...'
                sh '''
                    export JAVA_HOME="/lib/jvm/jdk-17"
                    ./mvnw clean package
                '''
                println 'Build successful!'
                sh 'cp ./target/demo*.jar ./demo-${BUILD_NUMBER}.jar'
                withAWS(credentials: "${SERVER_CREDENTIALS}", region: "${REGION}") {
                    script {
                        s3Upload(file: "./demo-${BUILD_NUMBER}.jar", bucket: "${BUCKET}", path:"backend/demo-${BUILD_NUMBER}.jar")
                    }
                }
                sh 'rm ./demo-${BUILD_NUMBER}.jar'
            }
        }
        stage('Deploy') {
            agent { label 'java && target' }
            steps {
                sh 'sudo systemctl stop provedcode || true'
                withAWS(credentials: "${SERVER_CREDENTIALS}", region: "${REGION}") {
                    script {
                        s3Download(file:"./demo-${BUILD_NUMBER}.jar", bucket:"${BUCKET}", path:"backend/demo-${BUILD_NUMBER}.jar")
                    }
                }
                sh '''
                    chmod 755 ./backend/install-systemd-service.sh
                    ./backend/install-systemd-service.sh
                    mv -f ./demo-${BUILD_NUMBER}.jar ~/demo.jar
                    sudo systemctl enable provedcode --now
                '''
            }
        }
    }
    post {
        always {
            discordSend description: "Status: `${currentBuild.currentResult}`\nBuild log:\n```${BUILD_LOG}```",
                link: env.BUILD_URL,
                result: currentBuild.currentResult,
                title: JOB_NAME,
                webhookURL: "${env.WEBHOOK_URL}"
        }
    }
}